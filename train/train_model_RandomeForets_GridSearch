import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import OneHotEncoder, LabelEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

#USando GRID SEARCH Y CROSS VALIDATION
# ==============================
# 2. Preparar datos
# ==============================

df = pd.read_csv('data/raw/student_entry_performance_original.csv')
df.head()

X = df.drop(columns=['Performance'])
y = df['Performance']

# Lista de variables categóricas
cat_cols = ['Gender','Caste','coaching','time','Class_ten_education',
            'twelve_education','medium','Class_ X_Percentage','Class_XII_Percentage',
            'Father_occupation','Mother_occupation']

# Label encode target
le = LabelEncoder()
y_enc = le.fit_transform(y)

# Split train/test
X_train, X_test, y_train, y_test = train_test_split(
    X, y_enc, test_size=0.2, stratify=y_enc, random_state=42
)

# ==============================
# 3. Preprocesamiento
# ==============================
ohe = OneHotEncoder(handle_unknown='ignore')  # ignora categorías nuevas en test
preprocessor = ColumnTransformer(
    transformers=[('ohe', ohe, cat_cols)],
    remainder='drop'  # si hubiera num, cambiar a 'passthrough'
)

# ==============================
# 4. Pipeline con RandomForest
# ==============================
pipeline = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('clf', RandomForestClassifier(random_state=42, class_weight='balanced', n_jobs=-1))
])

# ==============================
# 5. Definir Grid de hiperparámetros
# ==============================
param_grid = {
    'clf__n_estimators': [40, 50, 60],
    'clf__max_depth': [None, 10, 20],
    'clf__min_samples_split': [10, 20, 30],
    'clf__min_samples_leaf': [1, 5, 10],
    'clf__max_features': ['auto', 'sqrt', 'log2']
}

# ==============================
# 6. GridSearch con Cross-Validation
# ==============================
grid_search = GridSearchCV(
    estimator=pipeline,
    param_grid=param_grid,
    cv=5,  # 5-fold cross-validation
    scoring='accuracy',
    n_jobs=-1,
    verbose=2
)

# ==============================
# 7. Entrenar GridSearch
# ==============================
grid_search.fit(X_train, y_train)

print("Mejores parámetros encontrados:")
print(grid_search.best_params_)

# ==============================
# 8. Evaluar en train y test
# ==============================
best_model = grid_search.best_estimator_

y_pred_train = best_model.predict(X_train)
y_pred_test = best_model.predict(X_test)

print(f"\nAccuracy train: {accuracy_score(y_train, y_pred_train):.4f}")
print(f"Accuracy test : {accuracy_score(y_test, y_pred_test):.4f}")

print("\nClassification report (test):")
print(classification_report(y_test, y_pred_test, target_names=le.classes_))

# Matriz de confusión opcional
import seaborn as sns
import matplotlib.pyplot as plt

cm = confusion_matrix(y_test, y_pred_test)
sns.heatmap(cm, annot=True, fmt='d', xticklabels=le.classes_, yticklabels=le.classes_)
plt.xlabel('Predicted')
plt.ylabel('True')
plt.savefig('reports/figures/confusion_matrix.png', dpi=300, bbox_inches='tight')
plt.show()